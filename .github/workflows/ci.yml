name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  schedule:
    - cron: "21 17 * * 2"

permissions:
  contents: read

jobs:
  security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout project source
      - uses: actions/checkout@v4

      # Scan code using project's configuration on https://semgrep.dev/manage
      - uses: returntocorp/semgrep-action@fcd5ab7459e8d91cb1777481980d1b18b4fc6735
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: ${{ secrets.SEMGREP_DEPLOYMENT_ID }}
          generateSarif: "1"

      # Upload SARIF file generated in previous step
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [security-scan]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.14.0"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.7.1
          run_install: false
          cache: "pnpm"

      - name: Install dependencies
        run: CI=1 pnpm install

      - name: Lint
        run: CI=1 pnpm run lint

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: [security-scan]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.14.0"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.7.1
          run_install: false
          cache: "pnpm"

      - name: Install dependencies
        run: CI=1 pnpm install

      - name: Check Types
        run: CI=1 pnpm run check-types

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [security-scan]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.14.0"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.7.1
          run_install: false
          cache: "pnpm"

      - name: Install dependencies
        run: CI=1 pnpm install

      - name: Test
        run: CI=1 pnpm run test

  deploy-cf:
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.7.1
          run_install: false
          cache: "pnpm"

      - name: Install emsdk
        uses: mymindstorm/setup-emsdk@v14

      - name: Verify em++
        run: em++ -v

      - name: install wasm-pack
        run: pnpm i -g wasm-pack

      # Set up the entire workspace with Turborepo
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Build the entire monorepo with turbo
      - name: Build web app with monorepo dependencies
        env:
          HUSKY: 0
          HUSKY_SKIP_INSTALL: 1
        run: CI=1 pnpm run build --filter=web

      # List output directory to verify it exists
      - name: List build outputs
        run: ls -la apps/web/out/

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          projectName: clifford-dejong # Replace with your preferred Cloudflare Pages project name
          directory: apps/web/out # The output directory from Next.js static export
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          # When branch is 'main', deploy to production; otherwise, deploy as a preview with branch name
          branch: ${{ github.ref_name }}
